UserCake implements authorization/access control at the page level.  Each user group could be granted permissions for any number of pages.  This works well if each page performs a single activity that is independent of context.

However, sometimes you want different users to be authorized to do different things on the same page.  For example, suppose you create a new type of user, "group admins".  Group admins have administrative control, but only over one specific group.  If Alice is a group admin for her group (let's call it `Alice's peeps`), you want her to be able to create, delete, and update users in her own group but not in someone else's group (`Bob's peeps`).

Instead of having a separate API page (such as `update_user.php`) for `Alice's peeps` and `Bob's peeps`, we have a single page that checks to make sure that the current user is authorized to perform a specific action with specific parameters.  Informally, we want to say that "Alice has permission for action: "update user", with restriction "can only update users in group 'Alice's peeps'".  Formally, we'd specify this in the `user_action_permits` table, as such:

| id  | user_id | action | permits |
| ------------- | ------------- | ------------- | ------------- |
| 9 | 7 | updateUser | sameGroup(user_id) |

This tells UserFrosting that whenever Alice (user id 7) wants to update another user, the system should first check that Alice and the target user are in the same group, using the permission validation function `sameGroup()` (defined in `models/authorization.php`).  The parameter `user_id` in `sameGroup()` tells UserFrosting that it should attempt to match the parameter with the same name `user_id` that is being passed into `updateUser`.

Nifty, eh?


- **admin_load_permissions.php**
  + Load permissions for a specified user, using the user's user id (`id` column in `uc_users`).
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters:
    * `user_id` : a user's user id.
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Obviously set to 0.
  + Response on success (JSON):
    * A JSON object with permission id's (from `uc_permissions`) as keys, mapping to permission objects for each permission group that the user has access to.  Each permission object contains the following fields:
        - `id` : the unique id for this permission group.
        - `name` : the name of the permission group.
        - `is_default` : specify whether the permission group is automatically added when a new account is registered. (`"1"` or `"0"`).
        - `can_delete` : specify whether the permission group can be deleted via "delete_permission.php". (`"1"` or `"0"`).
        - `user_id` : the id of the queried user.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * User id not specified
    * Database error


- **create_user.php**
  + Create a new user.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `username` : the username for the new user.  Must be between 1 and 25 characters long, letters and numbers only (no whitespace).
    * `displayname` : the display name for the new user.  Must be between 1 and 50 characters long.
    * `title` : the title for the new user.  Must be between 1 and 150 characters long.
    * `email` : the email address for the new user.  Must be between 1 and 150 characters and a valid email format.
    * `password` : the password for the new user.  Must be between 8 and 50 characters.
    * `confirm_pass` : the password for the new user.  Must match the `password` field.
    * `add_permissions` : a comma-separated string of permission id's to be associated with the new user.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`.
    * `csrf_token` : the csrf token for the user's session.  Must be set, or the request will automatically fail.    
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_USER_CHAR_LIMIT` : `username` too short/long.
    * `ACCOUNT_USER_INVALID_CHARACTERS` : `username` must be letters and numbers only.
    * `ACCOUNT_DISPLAY_CHAR_LIMIT` : `displayname` too short/long.
    * `ACCOUNT_PASS_CHAR_LIMIT` : `password` too short/long.
    * `ACCOUNT_PASS_MISMATCH` : `password` and `confirm_pass` do not match.
    * `ACCOUNT_INVALID_EMAIL` : `email` is not a valid email address format.
    * `ACCOUNT_USERNAME_IN_USE` : `username` already in use.
    * `ACCOUNT_DISPLAYNAME_IN_USE` : `displayname` already in use.  TODO: relax this restriction?
    * `ACCOUNT_EMAIL_IN_USE` : `email` already in use.
    * `MAIL_ERROR` : Error sending activation email (if enabled).
    * `SQL_ERROR` : Database error
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_CREATION_COMPLETE` : User account successfully created.
    * `ACCOUNT_PERMISSION_ADDED` : Permissions successfully added for new user.


- **delete_permission.php**
  + Delete a permission group, and all it's page and user associations.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `permission_id` : the id of the permission group to delete.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `CANNOT_DELETE_PERMISSION_GROUP` : The specified group is undeletable (`can_delete`=0)
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `PERMISSION_DELETION_SUCCESSFUL_NAME` : Permission group successfully deleted.


- **delete_user.php**
  + Delete a user account, and all their permission associations.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `user_id` : the id of the user to delete.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `SQL_ERROR` : Database error.
    * `ACCOUNT_DELETE_MASTER` : The master (id=1) account cannot be deleted.
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_DELETIONS_SUCCESSFUL` : User account successfully deleted.


- **load_current_user.php**
  + Loads data for the currently logged in user.
  + Default permission level: *public*
  + Request method: *GET*
  + Request parameters: *none*
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Set to 0.
  + Response on success (JSON):
    * A JSON object containing relevant data for the user's account:
        * `id` : the id of the currently logged in user.
        * `username` : the username of the currently logged in user.
        * `displayname` : the display name of the currently logged in user.
        * `title` : the title of the currently logged in user.
        * `email` : the email address of the currently logged in user.
        * `sign_up_stamp` : the UNIX timestamp (seconds since Jan 1, 1970) of the time when the currently logged in user's account was created.
        * `admin` : specify whether or not this user is an admin.  Useful for frontend rendering purposes.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied.
    * User not logged in.
    * Account data not found.
    * `SQL_ERROR` : Database error.

    
- **load_form_user.php**
  + Loads a customized form/panel for creating, updating, or displaying a user.
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters:
    * `box_id`: the desired name of the div that will contain the form.
    * `render_mode`: `modal` or `panel`
    * `user_id` (optional): if specified, will load the relevant data for the user into the form.  Form will then be in "update" mode.
    * `show_dates` (optional): if set to `"true"`, will show the registered and last signed in date fields (fields will be read-only)
    * `show_passwords` (optional): if set to `"true"`, will show the password creation fields
    * `disabled` (optional): if set to `"true"`, disable all fields
    * `button_submit`: If set to `"true"`, display the submission button for this form.
    * `button_edit`: If set to `"true"`, display the edit button for panel mode.
    * `button_disable`: If set to `"true"`, display the enable/disable button.
    * `button_activate`: If set to `"true"`, display the activate button for inactive users.
    * `button_delete`: If set to `"true"`, display the deletion button for deletable users.
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Set to 0.
  + Response on success (JSON):
    * A JSON object containing the requested form/panel:
        * `data` : the fully rendered HTML for the form/panel.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied.
    

- **load_permissions.php**
  + Returns a list of data for all permission levels.
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters:
    * `limit` : (optional).  Limit how many results to return.
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Set to 0.
  + Response on success (JSON):
    * A JSON object with permission id's (from `uc_permissions`) as keys, mapping to permission objects for each permission group.  Each permission object contains the following fields:
        - `id` : the unique id for this permission group.
        - `name` : the name of the permission group.
        - `is_default` : specify whether the permission group is automatically added when a new account is registered. (`"1"` or `"0"`).
        - `can_delete` : specify whether the permission group can be deleted via "delete_permission.php". (`"1"` or `"0"`).
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied.
    * Database error.


- **load_site_pages.php**
  + Scans the root directory for new and missing PHP pages, and updates the database accordingly (new pages are made public by default).  Then, returns a list of data objects corresponding to website pages.
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters: *none*
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Set to 0.
  + Response on success (JSON):
    * A JSON object with file names as keys, mapping to page objects for each page.  Each page object contains the following fields:
        - `id` : the unique id for this page.
        - `page` : the file name of the page, relative to the root directory.
        - `private` : specify whether the page is public or private (logged in users only). (`"1"` or `"0"`).
        - `status` : returns the status of the page after the most recent call to this function, indicating whether it was created, deleted, or updated. (`"C"`, `"D"`, or `"U"`).
        - `permissions` : A list of permissions associated with this page, as per load_permissions.php.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied.
    * Database error.
    

- **load_site_settings.php**
  + Returns a list of site configuration parameters, indexed by the parameter name.
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters: *none*
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Set to 0.
  + Response on success (JSON):
    * A JSON object with parameter names as keys, mapping to their values.  The default parameters for UserFrosting are as follows:
        - `website_name` : the name of your site.
        - `website_url` : the root url for your UserFrosting installation.
        - `email` : the email address to use for sending administrative emails.
        - `new_user_title` : The default title for newly registered users.
        - `can_register` : `"1"` if account self-registration is enabled (from "register.php"), `"0"` otherwise.
        - `activation` : `"1"` if email activation for new accounts is enabled, `"0"` otherwise.
        - `resend_activation_threshold` : number of hours required between consecutive requests from a user to resend their account activation link.  Default is 0.
        - `language` : The language template to use for generating site messages, etc.  Default: english.
        - `template` : The default site CSS template.  TODO: expand to include Bootstrap templates.
        - `language_options` : A list of language template options, based on scanning the `models/languages` folder.
        - `template_options` : A list of CSS template options, based on scanning the `models/site-templates` folder.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied.
    * Database error.

        
- **load_user.php**
  + Load data for a specified user, using the user's user id (`id` column in `uc_users`).
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters:
    * `user_id` : a user's user id.
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Obviously set to 0.
  + Response on success (JSON):
    * A JSON object containing the user's data.  Contains the following fields:
        - `user_id` : the unique id of the specified user.
        - `user_name` : the username of the specified user.
        - `display_name` : the display name of the specified user.
        - `title` : the title of the specified user.
        - `email` : the email address of the specified user.
        - `sign_up_stamp` : the UNIX timestamp (seconds since Jan 1, 1970) of the time when the specified user's account was created.
        - `last_sign_in_stamp` : the UNIX timestamp (seconds since Jan 1, 1970) of the time when the user last logged in.
        - `active` : `"1"` if the user's account has been activated, `"0"` otherwise.
        - `enabled` : `"1"` if the user's account is enabled, `"0"` otherwise.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * Invalid user id specified
    * Database error
    

- **load_users.php**
  + Load data objects for all users.
  + Default permission level: *admin only*
  + Request method: *GET*
  + Request parameters:
    * `limit` : (optional).  Limit how many results to return.
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Obviously set to 0.
  + Response on success (JSON):
    * A JSON object with user id's (from `uc_users`) as keys, mapping to user objects.  Each user object contains the same fields as specified in "load_user.php".
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * Database error
    

- **process_login.php**
  + Processes a user login request, and creates a session for the user upon success.
  + Default permission level: *public*
  + Request method: *POST*
  + Request parameters:
    * `username` : the username for the login request.
    * `password` : the password for the login request.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_SPECIFY_USERNAME` : username not specified.
    * `ACCOUNT_SPECIFY_PASSWORD` : password not specified.
    * `ACCOUNT_USER_OR_PASS_INVALID` : either the username could not be found in the database, or the password was not correct.
    * `ACCOUNT_INACTIVE` : the account has not yet been activated (when email activation is enabled).
    * `ACCOUNT_DISABLED` : the account has been disabled by an administrator.
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * Login successful (welcome message).

    
- **update_page_permission.php**
  + Update permissions for a site page, and private/public status.  TODO: implement "public" pages as just another permission group.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `page_id` : the id of the page to be updated (from `uc_pages`)
    * `permission_id` : the id of the permission group to be associated with this page (from `uc_permissions`)
    * `checked` : `"1"` if the page is to be set as a private page, `"0"` for a public page.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * *none*


- **update_permission.php**
  + Update settings for a permission group.  Not yet implemented.
  + Default permission level: *admin only*
  + Request method: *POST*
  + TODO: Implement this properly.
  

- **update_site_settings.php**
  + Update site configuration settings.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `website_name` : the name of your site.  Must be between 1 and 150 characters.
    * `website_url` : the root url for your UserFrosting installation.  Must be between 1 and 150 characters and end with a '/'.
    * `email` : the email address to use for sending administrative emails.  Must be between 1 and 150 characters and a valid email format.
    * `can_register` : `"1"` if account self-registration is enabled (from "register.php"), `"0"` otherwise.
    * `new_user_title` : the default title for new users.  Must be between 1 and 150 characters.
    * `activation` : `"1"` if email activation for new accounts is enabled, `"0"` otherwise.
    * `resend_activation_threshold` : number of hours required between consecutive requests from a user to resend their account activation link.  Default is 0.
    * `language` : The language template to use for generating site messages, etc.  Default: english.
    * `template` : The default site CSS template.  TODO: expand to include Bootstrap templates.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `CONFIG_NAME_CHAR_LIMIT` : Site name must be between 1 and 150 characters.
    * `CONFIG_URL_CHAR_LIMIT` : Site url must be between 1 and 150 characters.
    * `CONFIG_INVALID_URL_END` : Site url must end with '/'.
    * `CONFIG_EMAIL_CHAR_LIMIT` : Email must be between 1 and 150 characters.
    * `CONFIG_TITLE_CHAR_LIMIT` : Default new user title must be between 1 and 150 characters.
    * `CONFIG_EMAIL_INVALID` : Email must a valid format.
    * `CONFIG_REGISTRATION_TRUE_FALSE` : Registration must have either the value `"true"` or `"false"`. 
    * `CONFIG_ACTIVATION_TRUE_FALSE`: Registration must have either the value `"true"` or `"false"`. 
    * `CONFIG_ACTIVATION_RESEND_RANGE` : Email activation resend wait period must be between 0 and 72 hours.
    * `CONFIG_LANGUAGE_CHAR_LIMIT`: Language template filename must be between 1 and 150 characters.
    * `CONFIG_LANGUAGE_INVALID` : The language template specified could not be found.
    * `CONFIG_TEMPLATE_CHAR_LIMIT` : Site template filename must be between 1 and 150 characters.
    * `CONFIG_TEMPLATE_INVALID` : The site template specified could not be found.
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `CONFIG_UPDATE_SUCCESSFUL` : Site configuration was successfully updated.

    
- **update_user.php**
  + Update an existing user's account.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters (all except `user_id` are optional):
    * `user_id` : the id of the user (in `uc_users`).
    * `display_name` : the new display name for the user.  Must be between 1 and 50 characters long.
    * `title` : the new title for the user.  Must be between 1 and 150 characters long.
    * `email` : the new email address for the user.  Must be between 1 and 150 characters and a valid email format.
    * `add_permissions` : a comma-separated string of permission id's to be associated with the user.
    * `remove_permissions` : a comma-separated string of permission id's to be removed from the user.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`.
    * `csrf_token` : the csrf token for the user's session.  Must be set, or the request will automatically fail.
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_USER_CHAR_LIMIT` : `username` too short/long.
    * `ACCOUNT_USER_INVALID_CHARACTERS` : `username` must be letters and numbers only.
    * `ACCOUNT_DISPLAY_CHAR_LIMIT` : `displayname` too short/long.
    * `ACCOUNT_INVALID_EMAIL` : `email` is not a valid email address format.
    * `ACCOUNT_USERNAME_IN_USE` : `username` already in use.
    * `ACCOUNT_DISPLAYNAME_IN_USE` : `displayname` already in use.  TODO: relax this restriction?
    * `ACCOUNT_TITLE_CHAR_LIMIT` : `title` too short/long.
    * `ACCOUNT_EMAIL_IN_USE` : `email` already in use.
    * `SQL_ERROR` : Database error
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_DISPLAYNAME_UPDATED` : User display name successfully updated.
    * `ACCOUNT_EMAIL_UPDATED` : User email successfully updated.
    * `ACCOUNT_TITLE_UPDATED` : User title successfully updated.
    * `ACCOUNT_PERMISSION_ADDED` : Permissions successfully added for the user.
    * `ACCOUNT_PERMISSION_REMOVED` : Permissions successfully removed for the user.
    

- **update_user_enabled.php**
  + Enable or disable a user's account.
  + Default permission level: *admin only*
  + Request method: *POST*
  + Request parameters:
    * `user_id` : the id of the user (in `uc_users`).
    * `enabled` : `"1"` to enable the account, `"0"` to disable the account.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `SQL_ERROR` : Database error
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * Account successfully enabled.
    * Account successfully disabled.


- **user_create_user.php**
  + Allows a newly registered user to create their account.  Sets their title automatically to the `new_user_title` specified in site settings.  Adds all default permission levels (`is_default` set to `1` in `uc_permissions`) to the newly registered account.
  + Default permission level: *public*
  + Request method: *POST*
  + Request parameters:
    * `username` : the username for the new user.  Must be between 1 and 25 characters long, letters and numbers only (no whitespace).
    * `displayname` : the display name for the new user.  Must be between 1 and 50 characters long.
    * `email` : the email address for the new user.  Must be between 1 and 150 characters and a valid email format.
    * `password` : the password for the new user.  Must be between 8 and 50 characters.
    * `confirm_pass` : the password for the new user.  Must match the `password` field.
    * `captcha` : the captcha code displayed on the registration form.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_USER_CHAR_LIMIT` : `username` too short/long.
    * `ACCOUNT_USER_INVALID_CHARACTERS` : `username` must be letters and numbers only.
    * `ACCOUNT_DISPLAY_CHAR_LIMIT` : `displayname` too short/long.
    * `ACCOUNT_PASS_CHAR_LIMIT` : `password` too short/long.
    * `ACCOUNT_PASS_MISMATCH` : `password` and `confirm_pass` do not match.
    * `ACCOUNT_INVALID_EMAIL` : `email` is not a valid email address format.
    * `ACCOUNT_USERNAME_IN_USE` : `username` already in use.
    * `ACCOUNT_DISPLAYNAME_IN_USE` : `displayname` already in use.  TODO: relax this restriction?
    * `ACCOUNT_EMAIL_IN_USE` : `email` already in use.
    * `CAPTCHA_FAIL` : captcha did not match.
    * `MAIL_ERROR` : Error sending activation email (if enabled).
    * `SQL_ERROR` : Database error
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_CREATION_COMPLETE` : User account successfully created.
    

- **user_load_permissions.php**
  + Load permissions for the currently logged in user.
  + Default permission level: *logged in users only*
  + Request method: *GET*
  + Request parameters: *none*
  + Response on failure (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.  Obviously set to 0.
  + Response on success (JSON):
    * A JSON object with permission id's (from `uc_permissions`) as keys, mapping to permission objects for each permission group that the user has access to.  Each permission object contains the following fields:
        - `id` : the unique id for this permission group.
        - `name` : the name of the permission group.
        - `is_default` : specify whether the permission group is automatically added when a new account is registered. (`"1"` or `"0"`).
        - `can_delete` : specify whether the permission group can be deleted via "delete_permission.php". (`"1"` or `"0"`).
        - `user_id` : the id of the queried user.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * User is not logged in
    * Database error
    

- **user_resend_activation.php**
  + Resend the activation email for a newly registered account.  User must supply the username and email address used to create the account.
  + Default permission level: *public*
  + Request method: *POST*
  + Request parameters:
    * `username` : the username for the new user account.
    * `email` : the email address for the new user account.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_SPECIFY_EMAIL` : no email address specified.
    * `ACCOUNT_INVALID_EMAIL` : email address is not a valid format, or no account with the specified email address was found.
    * `ACCOUNT_SPECIFY_USERNAME` : no username specified.
    * `ACCOUNT_INVALID_USERNAME` : no account with the specified username was found.
    * `ACCOUNT_USER_OR_EMAIL_INVALID` : username and email address are not linked to the same account.
    * `ACCOUNT_ALREADY_ACTIVE` : account has already been activated.
    * `ACCOUNT_LINK_ALREADY_SENT` : activation link cannot be resent until the activation threshold expires.
    * `MAIL_TEMPLATE_BUILD_ERROR` : could not build the mail template.
    * `MAIL_ERROR` : Error sending activation email (if enabled).
    * `SQL_ERROR` : Database error
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_NEW_ACTIVATION_SENT` : Activation email successfully resent.
    

- **user_reset_password.php**
  + Process various types of password reset requests.
  + Default permission level: *public*
  + Request method: *POST* or *GET*
  + TODO: separate this into two pages, one that issues password resets and one that processes confirmation/denial.
  

- **user_update_account_settings.php**
  + Allows a user to update their email and/or password. 
  + Default permission level: *logged in users only*
  + Request method: *POST*
  + Request parameters:
    * `email` : the new email address for the user.  Must be between 1 and 150 characters and a valid email format.
    * `password` : the current password for the user.
    * `passwordc` : the new password for the user.  Must be between 8 and 50 characters.
    * `passwordcheck` : the new password for the user.  Must match the `passwordc` field.
    * `ajaxMode` : specify whether to access in AJAX/JSON mode.  `"true"` or `"false"`. 
  + Response (JSON):
    * `errors` : the number of errors generated by the request.
    * `successes` : the number of successes generated by the request.
  + Possible errors generated (stored in `$_SESSION['userAlerts']`):
    * Page access denied
    * `ACCOUNT_SPECIFY_PASSWORD` : current password not specified.
    * `ACCOUNT_PASSWORD_INVALID` : current password does not match.
    * `ACCOUNT_SPECIFY_EMAIL` : no email address specified.
    * `ACCOUNT_INVALID_EMAIL` : `email` is not a valid email address format.
    * `ACCOUNT_EMAIL_IN_USE` : `email` already in use.
    * `ACCOUNT_SPECIFY_NEW_PASSWORD` : new password not specified.
    * `ACCOUNT_SPECIFY_CONFIRM_PASSWORD` : confirm new password not specified.
    * `ACCOUNT_NEW_PASSWORD_LENGTH` : new password must be between 8 and 50 characters.
    * `ACCOUNT_PASS_MISMATCH` : `passwordc` and `passwordcheck` do not match.
    * `ACCOUNT_PASSWORD_NOTHING_TO_UPDATE` : new password is the same as the old password.
    * `NOTHING_TO_UPDATE` : No data was specified to update.
    * `NO_DATA` : No request data was received by the script.
  + Possible successes generated (stored in `$_SESSION['userAlerts']`): 
    * `ACCOUNT_EMAIL_UPDATED` : User email successfully updated.
    * `ACCOUNT_PASSWORD_UPDATED` : User password successfully updated.
    
  